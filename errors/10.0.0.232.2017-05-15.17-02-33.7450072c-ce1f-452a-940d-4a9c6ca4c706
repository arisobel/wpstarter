(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> Invalid URI string in DAL: mysql://sqlite://storage.sqlite"
p3
sS'layer'
p4
S'C:\\Python\\web2py\\applications\\wpstarter_gh\\models\\db1.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\nDEBUG = True\n\nfrom gluon import current\n\n# track changes for modules\nfrom gluon.custom_import import track_changes\ntrack_changes(DEBUG)\n\n# set utc as standard time for app\nrequest.now = request.utcnow\n\nif request.global_settings.web2py_version < "2.14.1":\n    raise HTTP(500, "Requires web2py 2.14.1 or newer")\n\n# request.requires_https()\n\n# application configuration using private/appconfig.ini\nfrom gluon.contrib.appconfig import AppConfig\nmyconf = AppConfig(reload=DEBUG)\ncurrent.myconf = myconf\nmyconf_env = myconf.get(\'environment.type\')\ncurrent.myconf_env = myconf_env\n\n# set db connection\nif not request.env.web2py_runtime_gae:\n    # if NOT running on Google App Engine use SQLite or other DB\n    db = DAL(myconf.get(myconf_env + \'db.uri\'),\n             pool_size=myconf.get(myconf_env + \'db.pool_size\'),\n             #migrate_enabled=myconf.get(myconf_env + \'db.migrate\'),\n             check_reserved=[\'mysql\', \'postgres\'],  # [\'all\'])\n             lazy_tables=True)\nelse:\n    # connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore+ndb\')\n    # store sessions and tickets there\n    session.connect(request, response, db=db)\n    # or store session in Memcache, Redis, etc.\n    # from gluon.contrib.memdb import MEMDB\n    # from google.appengine.api.memcache import Client\n    # session.connect(request, response, db = MEMDB(Client()))\n\n# by default give a view/generic.extension to all actions from localhost\n# none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n\n# choose a style for forms\nresponse.formstyle = myconf.get(\'forms.formstyle\')  # or \'bootstrap3_stacked\' or \'bootstrap2\' or other\nresponse.form_label_separator = myconf.get(\'forms.separator\') or \'\'\n\n# optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n# static assets folder versioning\n# response.static_version = \'0.0.0\'\n\nfrom gluon.tools import Auth, Service, PluginManager\n\nauth = Auth(db, host_names=myconf.get(myconf_env + \'host.name\'))\nservice = Service()\nplugins = PluginManager()\n\n# define custom auth fields (before creating auth tables)\nauth.settings.extra_fields[\'auth_user\'] = [\n    Field(\n        \'bookmarks\', length=4096,\n        # filter_in = lambda bm_obj: repr(bm_obj),  # could be str()\n        # filter_out = lambda bm_str: eval(bm_str) if bm_str else {},  # could be ast.literal_eval\n        represent=(lambda v, r: BEAUTIFY(eval(v)) if v else None),\n        readable=False, writable=False,\n        default={}\n    )\n]\n\n# create all tables needed by auth\nauth.define_tables(username=True, signature=True, migrate=False)\n\n# add auth formatting, validation, and representation\ndb.auth_user._format = \'%(first_name)s %(last_name)s (%(id)s)\'  # defaults to \'%(username)\'\n\n# configure email\nmail = auth.settings.mailer\nmail.settings.server = myconf.get(myconf_env + \'smtp.server\')\nmail.settings.sender = myconf.get(myconf_env + \'smtp.sender\')\nmail.settings.login = myconf.get(myconf_env + \'smtp.login\')\nmail.settings.tls = myconf.get(myconf_env + \'smtp.tls\') or False\nmail.settings.ssl = myconf.get(myconf_env + \'smtp.ssl\') or False\n\n# configure auth policy\nauth.settings.actions_disabled.append(\'register\')\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\nauth.settings.reset_password_requires_verification = True\nauth.settings.create_user_groups = False  # defaults to True\nauth.settings.expiration = 60 * 60 * 24  # seconds\n\n# after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n\n# add db, auth, mail to current for access from modules\ncurrent.db = db\ncurrent.auth = auth\ncurrent.mail = mail\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Python\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\Python\\web2py\\applications\\wpstarter_gh\\models\\db1.py", line 33, in <module>\n    lazy_tables=True)\n  File "C:\\Python\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 174, in __call__\n    obj = super(MetaDAL, cls).__call__(*args, **kwargs)\n  File "C:\\Python\\web2py\\gluon\\packages\\dal\\pydal\\base.py", line 446, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "C:\\Python\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 60, in __call__\n    obj = super(AdapterMeta, cls).__call__(*args, **kwargs)\n  File "C:\\Python\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\mysql.py", line 106, in __init__\n    "Invalid URI string in DAL: %s" % self.uri)\nSyntaxError: Invalid URI string in DAL: mysql://sqlite://storage.sqlite\n'
p11
s.