(dp1
S'output'
p2
S'<class \'gluon.contrib.pymysql.err.ProgrammingError\'> (1146, u"Table \'liondata03.message\' doesn\'t exist")'
p3
sS'layer'
p4
S'C:\\web2py\\applications\\wpstarter\\controllers/message.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\nimport requests\n\ntable = db.message\nresponse.view_title = \'%s %s\' % (\n    table._singular,\n    request.function.replace(\'_\', \' \').title()\n)\n\n\ndef index():\n    redirect(URL(request.controller, \'list\'))\n\n\ndef list():\n    announcement = None  # XML(response.render(\'announcement.html\'))\n    query = (table)\n    items = db(query).select(orderby=~table.created_on).render()\n\n    # fields = [f for f in table]\n    fields = [\n        table.context, table.context_id,\n        table.direction, table.is_read,\n        table.auth_user,\n        table.created_on,\n        table.msg_subject\n    ]\n\n    return dict(\n        item_name=table._singular,\n        row_list=items,\n        field_list=fields,\n        announcement=announcement\n    )\n\n\n@auth.requires_login()\ndef create():\n    table.direction.default = \'Sent\'\n    table.is_read.default = True\n\n    # auth_user is optional to allow receipt of messages from unknown senders\n    # so we need to require it now\n    table.auth_user.requires = IS_IN_DB(db, \'auth_user.id\', db.auth_user._format)\n\n    fields = [\n        \'auth_user\',\n        \'msg_subject\',\n        \'msg_body\',\n    ]\n\n    form = SQLFORM(table, fields=fields)\n\n    if form.process().accepted:\n\n        user = db(db.auth_user.id == request.vars.auth_user).select().first()\n\n        send_mailgun_message(\n            user.email,\n            form.vars.msg_subject,\n            form.vars.msg_body\n        )\n\n        session.flash = \'%s sent!\' % table._singular\n        redirect(URL(request.controller, \'list\'))\n\n    elif form.errors:\n\n        response.flash = \'Please correct the errors\'\n\n    response.view = \'template/create.html\'\n    return dict(item_name=table._singular, form=form)\n\n\ndef reply():\n    item = table(table.id == request.args(0)) or redirect(URL(\'index\'))\n\n    # update read flag\n    if not item.is_read:\n        item.is_read = True\n        item.update_record()\n\n    table.auth_user.default = item.auth_user\n    table.auth_user.writable = False\n    table.direction.default = \'Sent\'\n    table.is_read.default = True\n    table.msg_to.default = item.msg_from\n    table.msg_subject.default = "Re: %s" % item.msg_subject\n\n    fields = [\n        \'auth_user\',\n        \'msg_subject\',\n        \'msg_body\',\n    ]\n\n    form = SQLFORM(table, fields=fields)\n\n    if form.process().accepted:\n\n        send_mailgun_message(\n            item.msg_from,\n            form.vars.msg_subject,\n            form.vars.msg_body\n        )\n\n        session.flash = \'%s created!\' % table._singular\n        redirect(URL(request.controller, \'list\'))\n\n    elif form.errors:\n\n        response.flash = \'Please correct the errors\'\n\n    return dict(item_name=table._singular, form=form, item=item)\n\n\ndef view():\n    item = table(table.id == request.args(0)) or redirect(URL(\'index\'))\n\n    # update read flag\n    if not item.is_read:\n        item.is_read = True\n        item.update_record()\n\n    fields = [\n        \'direction\',\n        \'auth_user\',\n        \'created_on\',\n        \'msg_subject\',\n        \'msg_body\',\n    ]\n\n    table.created_on.readable = True\n\n    form = SQLFORM(table, item, fields=fields, readonly=True, comments=False)\n\n    return dict(item_name=table._singular, form=form, item=item)\n\n\ndef send_mailgun_message(msg_to, msg_subject, msg_body):\n\n    sender_name = myconf.get(\'mailgun.sender_name\')\n    sender_id = myconf.get(\'mailgun.sender_id\')\n    sender_domain = myconf.get(\'mailgun.sender_domain\')\n    private_api_key = myconf.get(\'mailgun.private_api_key\')\n\n    requests.post(\n        "https://api.mailgun.net/v3/%s/messages" % sender_domain,\n        auth=("api", "%s" % private_api_key),\n        data={\n            "from": "%s <%s@%s>" % (sender_name, sender_id, sender_domain),\n            "to": msg_to,\n            "subject": msg_subject,\n            "text": msg_body\n        }\n    )\n\n    return\n\n\ndef receive_mailgun_message():\n    # https://documentation.mailgun.com/user_manual.html#routes\n\n    query = db.auth_user.email == request.vars[\'sender\']\n    user = db(query).select().first()\n\n    db.message.insert(\n        direction = \'Received\',\n        auth_user = user.id if user else None,\n        msg_sender = request.vars[\'sender\'],\n        msg_from = request.vars[\'From\'],\n        msg_recipient = request.vars[\'recipient\'],\n        msg_to = request.vars.To,\n        msg_subject = request.vars.subject,\n        msg_body = request.vars[\'stripped-text\'],\n        msg_html = request.vars[\'stripped-html\'],\n    )\n\n    return\n\n\ndef menu():\n    query = ((table.is_read == None) | (table.is_read == False))\n    items = db(query).select(orderby=~table.created_on)\n\n    return dict(unread_messages=items)\n\nresponse._vars=response._caller(menu)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\web2py\\gluon\\restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "C:\\web2py\\applications\\wpstarter\\controllers/message.py", line 188, in <module>\n  File "C:\\web2py\\gluon\\globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "C:\\web2py\\applications\\wpstarter\\controllers/message.py", line 184, in menu\n    items = db(query).select(orderby=~table.created_on)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1253, in _select_aux\n    self.execute(sql)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "C:\\web2py\\gluon\\packages\\dal\\pydal\\adapters\\base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "C:\\web2py\\gluon\\contrib\\pymysql\\cursors.py", line 117, in execute\n    self.errorhandler(self, exc, value)\n  File "C:\\web2py\\gluon\\contrib\\pymysql\\connections.py", line 202, in defaulterrorhandler\n    raise errorclass, errorvalue\nProgrammingError: (1146, u"Table \'liondata03.message\' doesn\'t exist")\n'
p11
s.